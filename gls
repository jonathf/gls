#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
""" gls: git-listings

A ls-clone that lists a content of a folder using the logic of ls,
but displayes the git-status through the colors."""

import argparse
import glob

import glslib


descriptions = []
for description in sorted(glslib.color.description.keys()):

    code = glslib.color.description[description]
    mapping = glslib.color.mapping[code]
    color = glslib.color.color[mapping]
    description = "     * " + color + description
    description = description + glslib.color.color["white"]
    descriptions.append(description)

descriptions = "\n".join(descriptions)

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description="""\
List information in FILE and color them by git local status""",
    epilog="""The default setting is to hide files that are
ignored and untracked.
Tracked hidden files are always visible.

The colors have the following meaning:
"""+descriptions+"""
Tracked files without change are white.""",
    usage="%(prog)s [-aAdihruvw] FILE"
    )

parser.add_argument("FILE", nargs="*",
                    help="files and foldes to be listed").completer=\
    lambda prefix, **kws: glob.glob("*")
parser.add_argument("-A", "--all", action="store_true",
                    help="show untracked, ignored and hidden")
parser.add_argument("-a", "--almost-all", action="store_true",
                    help="show untracted and ignored")
parser.add_argument("-r", "--recursive", action="store_true",
                    help="list subdirectories recursively")
parser.add_argument("-u", "--untracked", action="store_true",
                    help="show untracked files")
parser.add_argument("-i", "--ignored", action="store_true",
                    help="show ignored files")
parser.add_argument("-s", "--server", action="store_true",
                    help="check status on server instead of local")
parser.add_argument("-d", "--directory", action="store_true",
                    help="do not include directories")
parser.add_argument("-w", "--width", type=int,
                    help="assume screen width instead of current value")
parser.add_argument("-v", "--verbose", action="store_true",
                    help="be loud")

try:
    import argcomplete
    argcomplete.autocomplete(parser)
except:
    pass


if __name__ == "__main__":

    args = parser.parse_args()
    glslib.main(args)

